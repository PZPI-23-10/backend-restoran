// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend_restoran.Persistence;

#nullable disable

namespace backend_restoran.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250528172424_RestaurantOwnerFix")]
    partial class RestaurantOwnerFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backend_restoran.Persistence.Models.BaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.HasKey("Id");

                    b.ToTable("BaseEntity");

                    b.HasDiscriminator().HasValue("BaseEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("backend_restoran.Persistence.Models.Cuisine", b =>
                {
                    b.HasBaseType("backend_restoran.Persistence.Models.BaseEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Cuisine");
                });

            modelBuilder.Entity("backend_restoran.Persistence.Models.Dish", b =>
                {
                    b.HasBaseType("backend_restoran.Persistence.Models.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasIndex("RestaurantId");

                    b.HasDiscriminator().HasValue("Dish");
                });

            modelBuilder.Entity("backend_restoran.Persistence.Models.DishTag", b =>
                {
                    b.HasBaseType("backend_restoran.Persistence.Models.BaseEntity");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasIndex("DishId");

                    b.HasIndex("TagId");

                    b.HasDiscriminator().HasValue("DishTag");
                });

            modelBuilder.Entity("backend_restoran.Persistence.Models.FavouriteDish", b =>
                {
                    b.HasBaseType("backend_restoran.Persistence.Models.BaseEntity");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("DishId");

                    b.HasIndex("UserId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("DishId")
                                .HasColumnName("FavouriteDish_DishId");
                        });

                    b.HasDiscriminator().HasValue("FavouriteDish");
                });

            modelBuilder.Entity("backend_restoran.Persistence.Models.FavouriteRestaurant", b =>
                {
                    b.HasBaseType("backend_restoran.Persistence.Models.BaseEntity");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("RestaurantId")
                                .HasColumnName("FavouriteRestaurant_RestaurantId");

                            t.Property("UserId")
                                .HasColumnName("FavouriteRestaurant_UserId");
                        });

                    b.HasDiscriminator().HasValue("FavouriteRestaurant");
                });

            modelBuilder.Entity("backend_restoran.Persistence.Models.Restaurant", b =>
                {
                    b.HasBaseType("backend_restoran.Persistence.Models.BaseEntity");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Layout")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("OwnerId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("Description")
                                .HasColumnName("Restaurant_Description");

                            t.Property("Name")
                                .HasColumnName("Restaurant_Name");

                            t.Property("PhotoUrl")
                                .HasColumnName("Restaurant_PhotoUrl");
                        });

                    b.HasDiscriminator().HasValue("Restaurant");
                });

            modelBuilder.Entity("backend_restoran.Persistence.Models.RestaurantCuisine", b =>
                {
                    b.HasBaseType("backend_restoran.Persistence.Models.BaseEntity");

                    b.Property<Guid>("CuisineId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.HasIndex("CuisineId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("RestaurantId")
                                .HasColumnName("RestaurantCuisine_RestaurantId");
                        });

                    b.HasDiscriminator().HasValue("RestaurantCuisine");
                });

            modelBuilder.Entity("backend_restoran.Persistence.Models.RestaurantModerator", b =>
                {
                    b.HasBaseType("backend_restoran.Persistence.Models.BaseEntity");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("RestaurantId")
                                .HasColumnName("RestaurantModerator_RestaurantId");

                            t.Property("UserId")
                                .HasColumnName("RestaurantModerator_UserId");
                        });

                    b.HasDiscriminator().HasValue("RestaurantModerator");
                });

            modelBuilder.Entity("backend_restoran.Persistence.Models.RestaurantTag", b =>
                {
                    b.HasBaseType("backend_restoran.Persistence.Models.BaseEntity");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("TagId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("RestaurantId")
                                .HasColumnName("RestaurantTag_RestaurantId");

                            t.Property("TagId")
                                .HasColumnName("RestaurantTag_TagId");
                        });

                    b.HasDiscriminator().HasValue("RestaurantTag");
                });

            modelBuilder.Entity("backend_restoran.Persistence.Models.Schedule", b =>
                {
                    b.HasBaseType("backend_restoran.Persistence.Models.BaseEntity");

                    b.Property<string>("Close")
                        .HasColumnType("text");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDayOff")
                        .HasColumnType("boolean");

                    b.Property<string>("Open")
                        .HasColumnType("text");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.HasIndex("RestaurantId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("RestaurantId")
                                .HasColumnName("Schedule_RestaurantId");
                        });

                    b.HasDiscriminator().HasValue("Schedule");
                });

            modelBuilder.Entity("backend_restoran.Persistence.Models.Tag", b =>
                {
                    b.HasBaseType("backend_restoran.Persistence.Models.BaseEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("Tag_Name");
                        });

                    b.HasDiscriminator().HasValue("Tag");
                });

            modelBuilder.Entity("backend_restoran.Persistence.Models.User", b =>
                {
                    b.HasBaseType("backend_restoran.Persistence.Models.BaseEntity");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("City")
                                .HasColumnName("User_City");

                            t.Property("Email")
                                .HasColumnName("User_Email");

                            t.Property("Street")
                                .HasColumnName("User_Street");
                        });

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("backend_restoran.Persistence.Models.Dish", b =>
                {
                    b.HasOne("backend_restoran.Persistence.Models.Restaurant", "Restaurant")
                        .WithMany("Dishes")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("backend_restoran.Persistence.Models.DishTag", b =>
                {
                    b.HasOne("backend_restoran.Persistence.Models.Dish", "Dish")
                        .WithMany("Tags")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend_restoran.Persistence.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("backend_restoran.Persistence.Models.FavouriteDish", b =>
                {
                    b.HasOne("backend_restoran.Persistence.Models.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend_restoran.Persistence.Models.User", "User")
                        .WithMany("FavoriteDishes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend_restoran.Persistence.Models.FavouriteRestaurant", b =>
                {
                    b.HasOne("backend_restoran.Persistence.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend_restoran.Persistence.Models.User", "User")
                        .WithMany("FavoriteRestaurants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend_restoran.Persistence.Models.Restaurant", b =>
                {
                    b.HasOne("backend_restoran.Persistence.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("backend_restoran.Persistence.Models.RestaurantCuisine", b =>
                {
                    b.HasOne("backend_restoran.Persistence.Models.Cuisine", "Cuisine")
                        .WithMany()
                        .HasForeignKey("CuisineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend_restoran.Persistence.Models.Restaurant", "Restaurant")
                        .WithMany("Cuisines")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cuisine");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("backend_restoran.Persistence.Models.RestaurantModerator", b =>
                {
                    b.HasOne("backend_restoran.Persistence.Models.Restaurant", "Restaurant")
                        .WithMany("Moderators")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend_restoran.Persistence.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend_restoran.Persistence.Models.RestaurantTag", b =>
                {
                    b.HasOne("backend_restoran.Persistence.Models.Restaurant", "Restaurant")
                        .WithMany("Tags")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend_restoran.Persistence.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("backend_restoran.Persistence.Models.Schedule", b =>
                {
                    b.HasOne("backend_restoran.Persistence.Models.Restaurant", "Restaurant")
                        .WithMany("Schedule")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("backend_restoran.Persistence.Models.Dish", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("backend_restoran.Persistence.Models.Restaurant", b =>
                {
                    b.Navigation("Cuisines");

                    b.Navigation("Dishes");

                    b.Navigation("Moderators");

                    b.Navigation("Schedule");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("backend_restoran.Persistence.Models.User", b =>
                {
                    b.Navigation("FavoriteDishes");

                    b.Navigation("FavoriteRestaurants");
                });
#pragma warning restore 612, 618
        }
    }
}
